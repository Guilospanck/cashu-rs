use bitcoin::secp256k1::PublicKey;
use serde::{Deserialize, Serialize};

pub type Amount = u64;

/// An encrypted ("blinded") secret and an amount is sent from Alice (wallet) to Bob (mint) for minting tokens or for swapping tokens.
/// A [`BlindedMessage`] is also called an `output`.
#[derive(Debug, Serialize, Deserialize)]
pub struct BlindedMessage {
  /// the value for the requested [`BlindSignature`]
  pub amount: Amount,
  /// requested keyset ID (hex) from which we expect a signature
  pub id: String,
  /// blinded secret message generated by Alice (wallet)
  #[serde(rename = "B_")]
  pub b: PublicKey,
}

pub type BlindedMessages = Vec<BlindedMessage>;

/// A [`BlindSignature`] is sent from Bob (mint) to Alice (wallet) after minting tokens or after swapping tokens.
/// A [`BlindSignature`] is also called a `promise`.
#[derive(Debug, Serialize, Deserialize)]
pub struct BlindSignature {
  /// value of the blinded token
  pub amount: Amount,
  /// keyset id (hex) of the mint keys that signed the token
  pub id: String,
  /// blinded signature on the secret message `B_` sent by [`BlindedMessage`]
  #[serde(rename = "C_")]
  pub c: PublicKey,
}
