use bitcoin::secp256k1::PublicKey;
use serde::{Deserialize, Serialize};

use crate::{
  keyset::{Keyset, KeysetWithKeys},
  types::{Amount, BlindSignatures, BlindedMessages, Proofs, Unit},
};

pub struct GetKeysResponse {
  pub keysets: Vec<KeysetWithKeys>,
}

pub struct GetKeysetsResponse {
  pub keysets: Vec<Keyset>,
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct PostMintQuoteBolt11Response {
  /// The quote ID,
  /// which is a random and unique id generated by the mint
  /// to internally look up the payment state.
  /// It MUST remain a secret between user and mint and
  /// MUST NOT be derivable from the payment request.
  /// A 3rd party who knows the quote ID can front-run and steal
  /// the tokens that this operation mints.
  pub quote: String,
  /// Payment request to fulfill
  pub request: String,
  /// Whether the request has been paid
  pub paid: bool,
  /// Unix timestamp (seconds) until which the mint quote is valid
  pub expiry: i64,
  /// the amount of the invoice
  pub amount: Amount,
}

impl PostMintQuoteBolt11Response {
  pub fn new(quote: String, request: String, paid: bool, expiry: i64, amount: Amount) -> Self {
    Self {
      quote,
      request,
      paid,
      expiry,
      amount,
    }
  }
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct PostMintBolt11Request {
  pub quote_id: String,
  pub outputs: BlindedMessages,
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct PostMintBolt11Response {
  pub signatures: BlindSignatures,
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct PostMeltQuoteBolt11Request {
  pub request: String, // bolt11 invoice to be paid
  pub unit: Unit,
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct PostMeltQuoteBolt11Response {
  /// The quote ID
  pub quote: String,
  /// Payment amount that needs to be paid
  pub amount: Amount,
  /// Additional fee reserve that is required
  /// The mint expects the wallet to include proofs of
  /// at least `total_amount = amount + fee_reserve`
  pub fee_reserve: Amount,
  /// If quote has been paid
  pub paid: bool,
  /// Unix timestamp (seconds) until which the melt quote is valid
  pub expiry: i64,
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct PostMeltBolt11Request {
  pub quote: String,
  pub inputs: Proofs,
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct PostMeltBolt11Response {
  /// If payment was successful
  pub paid: bool,
  /// Bolt11 payment preimage in case of a successful payment
  pub payment_preimage: Option<String>,
}

#[derive(Debug, Deserialize, Serialize, Clone, PartialEq)]
pub struct NutMethod {
  pub method: String,
  pub unit: Unit,
  pub min_amount: Amount,
  pub max_amount: Amount,
}

#[derive(Debug, Deserialize, Serialize, Clone, PartialEq)]
pub struct Nut {
  pub methods: Vec<NutMethod>,
  pub disabled: bool,
}

#[derive(Debug, Clone, PartialEq, Serialize, Deserialize)]
pub struct GetInfoResponse {
  /// Mint's name
  pub name: String,
  /// Mint's hex pubkey
  pub pubkey: PublicKey,
  /// Mint's version: is the implementation name and the version of the software running on this mint separated with a slash "/"
  pub version: String,
  /// Mint's description (short)
  pub description: String,
  /// Mint's description (long)
  pub description_long: String,
  /// Mint's contacts: is an array of contact methods to reach the mint operator. A contact method consists of two fields. The first denotes the method (like "email"), the second the identifier (like "contact@me.com").
  pub contact: Vec<[String; 2]>,
  /// It's the message of the day that the wallet must display to the user. It should only be used to display important announcements to users, such as scheduled maintenances.
  pub motd: String,
  /// Indicates each NUT specification that the mint supports and its settings. The settings are defined in each NUT separately.
  pub nuts: std::collections::HashMap<String, Nut>,
}
